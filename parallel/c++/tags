!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
COMM_THREAD	Makefile	/^COMM_THREAD=comm_thread$/;"	m
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-std=c++0x -W -Wall -Wextra -pedantic -g$/;"	m
Chopsticks	Chopsticks.h	/^    Chopsticks(int c) {$/;"	f	class:Chopsticks
Chopsticks	Chopsticks.h	/^class Chopsticks {$/;"	c
CommunicatingThread	CommunicatingThread.h	/^    CommunicatingThread(int _id, bool _sync): id(_id) {$/;"	f	class:CommunicatingThread
CommunicatingThread	CommunicatingThread.h	/^class CommunicatingThread: public Thread {$/;"	c
DINING_PHIL	Makefile	/^DINING_PHIL=dining_phil$/;"	m
DiningPhilosopher	DiningPhilosopher.h	/^    DiningPhilosopher(Chopsticks *c, int l, int r, bool _sync)$/;"	f	class:DiningPhilosopher
DiningPhilosopher	DiningPhilosopher.h	/^class DiningPhilosopher: public Thread {$/;"	c
O_COMMON	Makefile	/^O_COMMON=Thread.o $/;"	m
O_COMM_THREAD	Makefile	/^O_COMM_THREAD=CommunicatingThread.o $(O_COMMON)$/;"	m
O_DINING_PHIL	Makefile	/^O_DINING_PHIL=DiningPhilosopher.o $(O_COMMON)$/;"	m
Thread	lib/Thread.cpp	/^Thread::Thread() throw(runtime_error) {$/;"	f	class:Thread
Thread	lib/Thread.h	/^class Thread {$/;"	c
VPATH	Makefile	/^VPATH=.:.\/lib # for building in the current dir$/;"	m
_CHOPSTICKS_H_	Chopsticks.h	2;"	d
_COMMUNICATING_THREAD_H_	CommunicatingThread.h	2;"	d
_DINING_PHILOSOPHER_H_	DiningPhilosopher.h	2;"	d
_THREAD_H_	lib/Thread.h	2;"	d
check	Chopsticks.h	/^    void check(int idx) throw(runtime_error) {$/;"	f	class:Chopsticks
checkResult	lib/Thread.cpp	/^void Thread::checkResult(int result) throw(runtime_error) {$/;"	f	class:Thread
chops	DiningPhilosopher.h	/^    Chopsticks *chops;$/;"	m	class:DiningPhilosopher
count	Chopsticks.h	/^    int count;$/;"	m	class:Chopsticks
count	CommunicatingThread.cpp	/^const int CommunicatingThread::count=10000000;$/;"	m	class:CommunicatingThread	file:
count	CommunicatingThread.h	/^    static const int count;$/;"	m	class:CommunicatingThread
count	DiningPhilosopher.cpp	/^unsigned int DiningPhilosopher::count=0;$/;"	m	class:DiningPhilosopher	file:
count	DiningPhilosopher.h	/^    static unsigned int count;$/;"	m	class:DiningPhilosopher
eat	DiningPhilosopher.cpp	/^void DiningPhilosopher::eat() {$/;"	f	class:DiningPhilosopher
gain	Chopsticks.h	/^    bool gain(int idx) throw(runtime_error) {$/;"	f	class:Chopsticks
id	CommunicatingThread.h	/^    int id;$/;"	m	class:CommunicatingThread
join	lib/Thread.cpp	/^void *Thread::join() throw(runtime_error) {$/;"	f	class:Thread
leftStick	DiningPhilosopher.h	/^    int leftStick;$/;"	m	class:DiningPhilosopher
logMsg	DiningPhilosopher.cpp	/^void DiningPhilosopher::logMsg(std::string s) {$/;"	f	class:DiningPhilosopher
main	CommunicatingThread.cpp	/^int main(int argc, char **argv) {$/;"	f
main	DiningPhilosopher.cpp	/^int main(int argc, char **argv) {$/;"	f
maybeLock	lib/Thread.cpp	/^int Thread::maybeLock(pthread_mutex_t *mutex) {$/;"	f	class:Thread
maybeUnlock	lib/Thread.cpp	/^int Thread::maybeUnlock(pthread_mutex_t *mutex) {$/;"	f	class:Thread
mutex	CommunicatingThread.cpp	/^pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;$/;"	v
mutex	DiningPhilosopher.cpp	/^pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;$/;"	v
needLeftStick	DiningPhilosopher.h	/^    bool needLeftStick;$/;"	m	class:DiningPhilosopher
needRightStick	DiningPhilosopher.h	/^    bool needRightStick;$/;"	m	class:DiningPhilosopher
number	DiningPhilosopher.h	/^    unsigned int number;$/;"	m	class:DiningPhilosopher
parse_args	CommunicatingThread.cpp	/^void parse_args(int argc, char **argv) {$/;"	f
parse_args	DiningPhilosopher.cpp	/^void parse_args(int argc, char **argv) {$/;"	f
release	Chopsticks.h	/^    void release(int idx) throw(runtime_error) {$/;"	f	class:Chopsticks
result	lib/Thread.h	/^    void *result;$/;"	m	class:Thread
rightStick	DiningPhilosopher.h	/^    int rightStick;$/;"	m	class:DiningPhilosopher
run	CommunicatingThread.cpp	/^void *CommunicatingThread::run() {$/;"	f	class:CommunicatingThread
run	DiningPhilosopher.cpp	/^void *DiningPhilosopher::run() {$/;"	f	class:DiningPhilosopher
s	CommunicatingThread.cpp	/^int s=0; \/\/ shared variable$/;"	v
sStartDispatcher	lib/Thread.cpp	/^void *Thread::sStartDispatcher(void *arg) throw(runtime_error) {$/;"	f	class:Thread
start	lib/Thread.cpp	/^void Thread::start() throw(runtime_error) {$/;"	f	class:Thread
sticks	Chopsticks.h	/^    bool *sticks;$/;"	m	class:Chopsticks
sync	lib/Thread.h	/^    bool sync;$/;"	m	class:Thread
think	DiningPhilosopher.cpp	/^void DiningPhilosopher::think() {$/;"	f	class:DiningPhilosopher
threadAttr	lib/Thread.h	/^    pthread_attr_t threadAttr;$/;"	m	class:Thread
threadId	lib/Thread.h	/^    pthread_t threadId;$/;"	m	class:Thread
toString	DiningPhilosopher.cpp	/^std::string DiningPhilosopher::toString() {$/;"	f	class:DiningPhilosopher
~Chopsticks	Chopsticks.h	/^    virtual ~Chopsticks() {$/;"	f	class:Chopsticks
~Thread	lib/Thread.cpp	/^Thread::~Thread() throw(runtime_error) {$/;"	f	class:Thread
