@startuml mock-sequence

skinparam DefaultFontName Chalkduster
skinparam DefaultMonospacedFontName Monaco

collections "Test" as test
participant "Navigation Service" as system
boundary "TCP/IP Stack" as tcp
boundary "DNS Resolver" as resolver
participant mockServer [
AAT Mock Server
""127.0.0.1:443""
]
collections "Boat Mock" as boatMock
control "Mocks Controller" as mocksController

test -> mocksController: Tell "Boat Mock" to set expected input to ""value1""
mocksController -> boatMock: Set ""expected"" \n  input to ""value1""
test -> mocksController: Tell "Boat Mock" to set response to ""value2""
mocksController -> boatMock: Set configured \n  response to ""value2""

test -> system: Send GraphQL \n  request ""paddle""

system -> tcp: Send HTTPS request to \n  ""boat.service.domain.com""\n    ""/api/v1/essentialActions/paddle""\n  with ""input""
tcp -> resolver : Resolve \n  ""boat.service.domain.com""
resolver -> resolver : Consult \n  local \n  data
resolver -> tcp: ""127.0.0.1""
tcp -> mockServer: HTTPS request \n  ""/api/v1/essentialActions/paddle"" with ""input""
mockServer -> boatMock: ""handle(input)""
boatMock -> boatMock: Check ""input""\n  against ""expected""
boatMock -> tcp: Configured ""response""
tcp -> system: ""response""

system -> test: ""response""
test -> test: Validate \n  ""response""

@enduml
